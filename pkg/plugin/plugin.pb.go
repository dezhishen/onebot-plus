// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: onebot-plus/pkg/plugin/plugin.proto

package plugin

import (
	model "github.com/dezhishen/onebot-sdk/pkg/model"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_onebot_plus_pkg_plugin_plugin_proto protoreflect.FileDescriptor

var file_onebot_plus_pkg_plugin_plugin_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x28, 0x6f, 0x6e,
	0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6f,
	0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xce, 0x0c,
	0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x52, 0x50,
	0x43, 0x12, 0x3a, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48,
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x52, 0x50, 0x43,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x13,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x52, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x61, 0x6e, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x61, 0x6e, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e,
	0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56,
	0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x50, 0x6f, 0x6b, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x6f, 0x6b, 0x65, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x4b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x4b, 0x69, 0x6e, 0x67, 0x47, 0x52, 0x50, 0x43,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x6e,
	0x6f, 0x72, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50,
	0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47, 0x52, 0x50, 0x43,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0b,
	0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_onebot_plus_pkg_plugin_plugin_proto_goTypes = []interface{}{
	(*emptypb.Empty)(nil),                             // 0: google.protobuf.Empty
	(*model.EventMessagePrivateGRPC)(nil),             // 1: model.EventMessagePrivateGRPC
	(*model.EventMessageGroupGRPC)(nil),               // 2: model.EventMessageGroupGRPC
	(*model.EventMetaLifecycleGRPC)(nil),              // 3: model.EventMetaLifecycleGRPC
	(*model.EventMetaHeartbeatGRPC)(nil),              // 4: model.EventMetaHeartbeatGRPC
	(*model.EventNoticeGroupUploadGRPC)(nil),          // 5: model.EventNoticeGroupUploadGRPC
	(*model.EventNoticeGroupAdminGRPC)(nil),           // 6: model.EventNoticeGroupAdminGRPC
	(*model.EventNoticeGroupDecreaseGRPC)(nil),        // 7: model.EventNoticeGroupDecreaseGRPC
	(*model.EventNoticeGroupIncreaseGRPC)(nil),        // 8: model.EventNoticeGroupIncreaseGRPC
	(*model.EventNoticeGroupBanGRPC)(nil),             // 9: model.EventNoticeGroupBanGRPC
	(*model.EventNoticeGroupRecallGRPC)(nil),          // 10: model.EventNoticeGroupRecallGRPC
	(*model.EventNoticeGroupNotifyPokeGRPC)(nil),      // 11: model.EventNoticeGroupNotifyPokeGRPC
	(*model.EventNoticeGroupNotifyLuckyKingGRPC)(nil), // 12: model.EventNoticeGroupNotifyLuckyKingGRPC
	(*model.EventNoticeGroupNotifyHonorGRPC)(nil),     // 13: model.EventNoticeGroupNotifyHonorGRPC
	(*model.EventNoticeFriendAddGRPC)(nil),            // 14: model.EventNoticeFriendAddGRPC
	(*model.EventNoticeFriendRecallGRPC)(nil),         // 15: model.EventNoticeFriendRecallGRPC
	(*model.EventRequestFriendGRPC)(nil),              // 16: model.EventRequestFriendGRPC
	(*model.EventRequestGroupGRPC)(nil),               // 17: model.EventRequestGroupGRPC
	(*wrapperspb.StringValue)(nil),                    // 18: google.protobuf.StringValue
}
var file_onebot_plus_pkg_plugin_plugin_proto_depIdxs = []int32{
	0,  // 0: event.OnebotEventGRPC.Id:input_type -> google.protobuf.Empty
	0,  // 1: event.OnebotEventGRPC.Name:input_type -> google.protobuf.Empty
	0,  // 2: event.OnebotEventGRPC.Description:input_type -> google.protobuf.Empty
	0,  // 3: event.OnebotEventGRPC.Help:input_type -> google.protobuf.Empty
	1,  // 4: event.OnebotEventGRPC.MessagePrivate:input_type -> model.EventMessagePrivateGRPC
	2,  // 5: event.OnebotEventGRPC.MessageGroup:input_type -> model.EventMessageGroupGRPC
	3,  // 6: event.OnebotEventGRPC.MetaLifecycle:input_type -> model.EventMetaLifecycleGRPC
	4,  // 7: event.OnebotEventGRPC.MetaHeartbeat:input_type -> model.EventMetaHeartbeatGRPC
	5,  // 8: event.OnebotEventGRPC.NoticeGroupUpload:input_type -> model.EventNoticeGroupUploadGRPC
	6,  // 9: event.OnebotEventGRPC.NoticeGroupAdmin:input_type -> model.EventNoticeGroupAdminGRPC
	7,  // 10: event.OnebotEventGRPC.NoticeGroupDecrease:input_type -> model.EventNoticeGroupDecreaseGRPC
	8,  // 11: event.OnebotEventGRPC.NoticeGroupIncrease:input_type -> model.EventNoticeGroupIncreaseGRPC
	9,  // 12: event.OnebotEventGRPC.NoticeGroupBan:input_type -> model.EventNoticeGroupBanGRPC
	10, // 13: event.OnebotEventGRPC.NoticeGroupRecall:input_type -> model.EventNoticeGroupRecallGRPC
	11, // 14: event.OnebotEventGRPC.NoticeGroupNotifyPoke:input_type -> model.EventNoticeGroupNotifyPokeGRPC
	12, // 15: event.OnebotEventGRPC.NoticeGroupNotifyLuckyKing:input_type -> model.EventNoticeGroupNotifyLuckyKingGRPC
	13, // 16: event.OnebotEventGRPC.NoticeGroupNotifyHonor:input_type -> model.EventNoticeGroupNotifyHonorGRPC
	14, // 17: event.OnebotEventGRPC.NoticeFriendAdd:input_type -> model.EventNoticeFriendAddGRPC
	15, // 18: event.OnebotEventGRPC.NoticeFriendRecall:input_type -> model.EventNoticeFriendRecallGRPC
	16, // 19: event.OnebotEventGRPC.RequestFriend:input_type -> model.EventRequestFriendGRPC
	17, // 20: event.OnebotEventGRPC.RequestGroup:input_type -> model.EventRequestGroupGRPC
	18, // 21: event.OnebotEventGRPC.Id:output_type -> google.protobuf.StringValue
	18, // 22: event.OnebotEventGRPC.Name:output_type -> google.protobuf.StringValue
	18, // 23: event.OnebotEventGRPC.Description:output_type -> google.protobuf.StringValue
	18, // 24: event.OnebotEventGRPC.Help:output_type -> google.protobuf.StringValue
	0,  // 25: event.OnebotEventGRPC.MessagePrivate:output_type -> google.protobuf.Empty
	0,  // 26: event.OnebotEventGRPC.MessageGroup:output_type -> google.protobuf.Empty
	0,  // 27: event.OnebotEventGRPC.MetaLifecycle:output_type -> google.protobuf.Empty
	0,  // 28: event.OnebotEventGRPC.MetaHeartbeat:output_type -> google.protobuf.Empty
	0,  // 29: event.OnebotEventGRPC.NoticeGroupUpload:output_type -> google.protobuf.Empty
	0,  // 30: event.OnebotEventGRPC.NoticeGroupAdmin:output_type -> google.protobuf.Empty
	0,  // 31: event.OnebotEventGRPC.NoticeGroupDecrease:output_type -> google.protobuf.Empty
	0,  // 32: event.OnebotEventGRPC.NoticeGroupIncrease:output_type -> google.protobuf.Empty
	0,  // 33: event.OnebotEventGRPC.NoticeGroupBan:output_type -> google.protobuf.Empty
	0,  // 34: event.OnebotEventGRPC.NoticeGroupRecall:output_type -> google.protobuf.Empty
	0,  // 35: event.OnebotEventGRPC.NoticeGroupNotifyPoke:output_type -> google.protobuf.Empty
	0,  // 36: event.OnebotEventGRPC.NoticeGroupNotifyLuckyKing:output_type -> google.protobuf.Empty
	0,  // 37: event.OnebotEventGRPC.NoticeGroupNotifyHonor:output_type -> google.protobuf.Empty
	0,  // 38: event.OnebotEventGRPC.NoticeFriendAdd:output_type -> google.protobuf.Empty
	0,  // 39: event.OnebotEventGRPC.NoticeFriendRecall:output_type -> google.protobuf.Empty
	0,  // 40: event.OnebotEventGRPC.RequestFriend:output_type -> google.protobuf.Empty
	0,  // 41: event.OnebotEventGRPC.RequestGroup:output_type -> google.protobuf.Empty
	21, // [21:42] is the sub-list for method output_type
	0,  // [0:21] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_onebot_plus_pkg_plugin_plugin_proto_init() }
func file_onebot_plus_pkg_plugin_plugin_proto_init() {
	if File_onebot_plus_pkg_plugin_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onebot_plus_pkg_plugin_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_onebot_plus_pkg_plugin_plugin_proto_goTypes,
		DependencyIndexes: file_onebot_plus_pkg_plugin_plugin_proto_depIdxs,
	}.Build()
	File_onebot_plus_pkg_plugin_plugin_proto = out.File
	file_onebot_plus_pkg_plugin_plugin_proto_rawDesc = nil
	file_onebot_plus_pkg_plugin_plugin_proto_goTypes = nil
	file_onebot_plus_pkg_plugin_plugin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnebotEventGRPCClient is the client API for OnebotEventGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnebotEventGRPCClient interface {
	//插件Id
	Id(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//插件名称
	Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//插件描述
	Description(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//插件帮助
	Help(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//私聊消息
	MessagePrivate(ctx context.Context, in *model.EventMessagePrivateGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//群组消息
	MessageGroup(ctx context.Context, in *model.EventMessageGroupGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	MetaLifecycle(ctx context.Context, in *model.EventMetaLifecycleGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	MetaHeartbeat(ctx context.Context, in *model.EventMetaHeartbeatGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupUpload(ctx context.Context, in *model.EventNoticeGroupUploadGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupAdmin(ctx context.Context, in *model.EventNoticeGroupAdminGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupDecrease(ctx context.Context, in *model.EventNoticeGroupDecreaseGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupIncrease(ctx context.Context, in *model.EventNoticeGroupIncreaseGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupBan(ctx context.Context, in *model.EventNoticeGroupBanGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupRecall(ctx context.Context, in *model.EventNoticeGroupRecallGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupNotifyPoke(ctx context.Context, in *model.EventNoticeGroupNotifyPokeGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupNotifyLuckyKing(ctx context.Context, in *model.EventNoticeGroupNotifyLuckyKingGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeGroupNotifyHonor(ctx context.Context, in *model.EventNoticeGroupNotifyHonorGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeFriendAdd(ctx context.Context, in *model.EventNoticeFriendAddGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NoticeFriendRecall(ctx context.Context, in *model.EventNoticeFriendRecallGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestFriend(ctx context.Context, in *model.EventRequestFriendGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestGroup(ctx context.Context, in *model.EventRequestGroupGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type onebotEventGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewOnebotEventGRPCClient(cc grpc.ClientConnInterface) OnebotEventGRPCClient {
	return &onebotEventGRPCClient{cc}
}

func (c *onebotEventGRPCClient) Id(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) Name(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) Description(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/Description", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) Help(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/Help", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) MessagePrivate(ctx context.Context, in *model.EventMessagePrivateGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/MessagePrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) MessageGroup(ctx context.Context, in *model.EventMessageGroupGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/MessageGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) MetaLifecycle(ctx context.Context, in *model.EventMetaLifecycleGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/MetaLifecycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) MetaHeartbeat(ctx context.Context, in *model.EventMetaHeartbeatGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/MetaHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupUpload(ctx context.Context, in *model.EventNoticeGroupUploadGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupAdmin(ctx context.Context, in *model.EventNoticeGroupAdminGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupDecrease(ctx context.Context, in *model.EventNoticeGroupDecreaseGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupDecrease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupIncrease(ctx context.Context, in *model.EventNoticeGroupIncreaseGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupIncrease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupBan(ctx context.Context, in *model.EventNoticeGroupBanGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupRecall(ctx context.Context, in *model.EventNoticeGroupRecallGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupNotifyPoke(ctx context.Context, in *model.EventNoticeGroupNotifyPokeGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupNotifyPoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupNotifyLuckyKing(ctx context.Context, in *model.EventNoticeGroupNotifyLuckyKingGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupNotifyLuckyKing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeGroupNotifyHonor(ctx context.Context, in *model.EventNoticeGroupNotifyHonorGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeGroupNotifyHonor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeFriendAdd(ctx context.Context, in *model.EventNoticeFriendAddGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeFriendAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) NoticeFriendRecall(ctx context.Context, in *model.EventNoticeFriendRecallGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/NoticeFriendRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) RequestFriend(ctx context.Context, in *model.EventRequestFriendGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/RequestFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onebotEventGRPCClient) RequestGroup(ctx context.Context, in *model.EventRequestGroupGRPC, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.OnebotEventGRPC/RequestGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnebotEventGRPCServer is the server API for OnebotEventGRPC service.
type OnebotEventGRPCServer interface {
	//插件Id
	Id(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	//插件名称
	Name(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	//插件描述
	Description(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	//插件帮助
	Help(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	//私聊消息
	MessagePrivate(context.Context, *model.EventMessagePrivateGRPC) (*emptypb.Empty, error)
	//群组消息
	MessageGroup(context.Context, *model.EventMessageGroupGRPC) (*emptypb.Empty, error)
	//
	MetaLifecycle(context.Context, *model.EventMetaLifecycleGRPC) (*emptypb.Empty, error)
	//
	MetaHeartbeat(context.Context, *model.EventMetaHeartbeatGRPC) (*emptypb.Empty, error)
	NoticeGroupUpload(context.Context, *model.EventNoticeGroupUploadGRPC) (*emptypb.Empty, error)
	NoticeGroupAdmin(context.Context, *model.EventNoticeGroupAdminGRPC) (*emptypb.Empty, error)
	NoticeGroupDecrease(context.Context, *model.EventNoticeGroupDecreaseGRPC) (*emptypb.Empty, error)
	NoticeGroupIncrease(context.Context, *model.EventNoticeGroupIncreaseGRPC) (*emptypb.Empty, error)
	NoticeGroupBan(context.Context, *model.EventNoticeGroupBanGRPC) (*emptypb.Empty, error)
	NoticeGroupRecall(context.Context, *model.EventNoticeGroupRecallGRPC) (*emptypb.Empty, error)
	NoticeGroupNotifyPoke(context.Context, *model.EventNoticeGroupNotifyPokeGRPC) (*emptypb.Empty, error)
	NoticeGroupNotifyLuckyKing(context.Context, *model.EventNoticeGroupNotifyLuckyKingGRPC) (*emptypb.Empty, error)
	NoticeGroupNotifyHonor(context.Context, *model.EventNoticeGroupNotifyHonorGRPC) (*emptypb.Empty, error)
	NoticeFriendAdd(context.Context, *model.EventNoticeFriendAddGRPC) (*emptypb.Empty, error)
	NoticeFriendRecall(context.Context, *model.EventNoticeFriendRecallGRPC) (*emptypb.Empty, error)
	RequestFriend(context.Context, *model.EventRequestFriendGRPC) (*emptypb.Empty, error)
	RequestGroup(context.Context, *model.EventRequestGroupGRPC) (*emptypb.Empty, error)
}

// UnimplementedOnebotEventGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedOnebotEventGRPCServer struct {
}

func (*UnimplementedOnebotEventGRPCServer) Id(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Id not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) Name(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) Description(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Description not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) Help(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) MessagePrivate(context.Context, *model.EventMessagePrivateGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagePrivate not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) MessageGroup(context.Context, *model.EventMessageGroupGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGroup not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) MetaLifecycle(context.Context, *model.EventMetaLifecycleGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaLifecycle not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) MetaHeartbeat(context.Context, *model.EventMetaHeartbeatGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaHeartbeat not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupUpload(context.Context, *model.EventNoticeGroupUploadGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupUpload not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupAdmin(context.Context, *model.EventNoticeGroupAdminGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupAdmin not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupDecrease(context.Context, *model.EventNoticeGroupDecreaseGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupDecrease not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupIncrease(context.Context, *model.EventNoticeGroupIncreaseGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupIncrease not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupBan(context.Context, *model.EventNoticeGroupBanGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupBan not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupRecall(context.Context, *model.EventNoticeGroupRecallGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupRecall not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupNotifyPoke(context.Context, *model.EventNoticeGroupNotifyPokeGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupNotifyPoke not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupNotifyLuckyKing(context.Context, *model.EventNoticeGroupNotifyLuckyKingGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupNotifyLuckyKing not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeGroupNotifyHonor(context.Context, *model.EventNoticeGroupNotifyHonorGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeGroupNotifyHonor not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeFriendAdd(context.Context, *model.EventNoticeFriendAddGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeFriendAdd not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) NoticeFriendRecall(context.Context, *model.EventNoticeFriendRecallGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeFriendRecall not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) RequestFriend(context.Context, *model.EventRequestFriendGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFriend not implemented")
}
func (*UnimplementedOnebotEventGRPCServer) RequestGroup(context.Context, *model.EventRequestGroupGRPC) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGroup not implemented")
}

func RegisterOnebotEventGRPCServer(s *grpc.Server, srv OnebotEventGRPCServer) {
	s.RegisterService(&_OnebotEventGRPC_serviceDesc, srv)
}

func _OnebotEventGRPC_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).Id(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).Name(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_Description_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).Description(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/Description",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).Description(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/Help",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).Help(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_MessagePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventMessagePrivateGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).MessagePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/MessagePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).MessagePrivate(ctx, req.(*model.EventMessagePrivateGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_MessageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventMessageGroupGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).MessageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/MessageGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).MessageGroup(ctx, req.(*model.EventMessageGroupGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_MetaLifecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventMetaLifecycleGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).MetaLifecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/MetaLifecycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).MetaLifecycle(ctx, req.(*model.EventMetaLifecycleGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_MetaHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventMetaHeartbeatGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).MetaHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/MetaHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).MetaHeartbeat(ctx, req.(*model.EventMetaHeartbeatGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupUploadGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupUpload(ctx, req.(*model.EventNoticeGroupUploadGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupAdminGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupAdmin(ctx, req.(*model.EventNoticeGroupAdminGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupDecrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupDecreaseGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupDecrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupDecrease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupDecrease(ctx, req.(*model.EventNoticeGroupDecreaseGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupIncrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupIncreaseGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupIncrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupIncrease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupIncrease(ctx, req.(*model.EventNoticeGroupIncreaseGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupBanGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupBan(ctx, req.(*model.EventNoticeGroupBanGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupRecallGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupRecall(ctx, req.(*model.EventNoticeGroupRecallGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupNotifyPoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupNotifyPokeGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyPoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupNotifyPoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyPoke(ctx, req.(*model.EventNoticeGroupNotifyPokeGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupNotifyLuckyKing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupNotifyLuckyKingGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyLuckyKing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupNotifyLuckyKing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyLuckyKing(ctx, req.(*model.EventNoticeGroupNotifyLuckyKingGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeGroupNotifyHonor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeGroupNotifyHonorGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyHonor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeGroupNotifyHonor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeGroupNotifyHonor(ctx, req.(*model.EventNoticeGroupNotifyHonorGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeFriendAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeFriendAddGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeFriendAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeFriendAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeFriendAdd(ctx, req.(*model.EventNoticeFriendAddGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_NoticeFriendRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventNoticeFriendRecallGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).NoticeFriendRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/NoticeFriendRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).NoticeFriendRecall(ctx, req.(*model.EventNoticeFriendRecallGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_RequestFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventRequestFriendGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).RequestFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/RequestFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).RequestFriend(ctx, req.(*model.EventRequestFriendGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnebotEventGRPC_RequestGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.EventRequestGroupGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnebotEventGRPCServer).RequestGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.OnebotEventGRPC/RequestGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnebotEventGRPCServer).RequestGroup(ctx, req.(*model.EventRequestGroupGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnebotEventGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.OnebotEventGRPC",
	HandlerType: (*OnebotEventGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Id",
			Handler:    _OnebotEventGRPC_Id_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _OnebotEventGRPC_Name_Handler,
		},
		{
			MethodName: "Description",
			Handler:    _OnebotEventGRPC_Description_Handler,
		},
		{
			MethodName: "Help",
			Handler:    _OnebotEventGRPC_Help_Handler,
		},
		{
			MethodName: "MessagePrivate",
			Handler:    _OnebotEventGRPC_MessagePrivate_Handler,
		},
		{
			MethodName: "MessageGroup",
			Handler:    _OnebotEventGRPC_MessageGroup_Handler,
		},
		{
			MethodName: "MetaLifecycle",
			Handler:    _OnebotEventGRPC_MetaLifecycle_Handler,
		},
		{
			MethodName: "MetaHeartbeat",
			Handler:    _OnebotEventGRPC_MetaHeartbeat_Handler,
		},
		{
			MethodName: "NoticeGroupUpload",
			Handler:    _OnebotEventGRPC_NoticeGroupUpload_Handler,
		},
		{
			MethodName: "NoticeGroupAdmin",
			Handler:    _OnebotEventGRPC_NoticeGroupAdmin_Handler,
		},
		{
			MethodName: "NoticeGroupDecrease",
			Handler:    _OnebotEventGRPC_NoticeGroupDecrease_Handler,
		},
		{
			MethodName: "NoticeGroupIncrease",
			Handler:    _OnebotEventGRPC_NoticeGroupIncrease_Handler,
		},
		{
			MethodName: "NoticeGroupBan",
			Handler:    _OnebotEventGRPC_NoticeGroupBan_Handler,
		},
		{
			MethodName: "NoticeGroupRecall",
			Handler:    _OnebotEventGRPC_NoticeGroupRecall_Handler,
		},
		{
			MethodName: "NoticeGroupNotifyPoke",
			Handler:    _OnebotEventGRPC_NoticeGroupNotifyPoke_Handler,
		},
		{
			MethodName: "NoticeGroupNotifyLuckyKing",
			Handler:    _OnebotEventGRPC_NoticeGroupNotifyLuckyKing_Handler,
		},
		{
			MethodName: "NoticeGroupNotifyHonor",
			Handler:    _OnebotEventGRPC_NoticeGroupNotifyHonor_Handler,
		},
		{
			MethodName: "NoticeFriendAdd",
			Handler:    _OnebotEventGRPC_NoticeFriendAdd_Handler,
		},
		{
			MethodName: "NoticeFriendRecall",
			Handler:    _OnebotEventGRPC_NoticeFriendRecall_Handler,
		},
		{
			MethodName: "RequestFriend",
			Handler:    _OnebotEventGRPC_RequestFriend_Handler,
		},
		{
			MethodName: "RequestGroup",
			Handler:    _OnebotEventGRPC_RequestGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onebot-plus/pkg/plugin/plugin.proto",
}
