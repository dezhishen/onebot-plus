// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: onebot-plus/pkg/cli/message_cli.proto

package cli

import (
	model "github.com/dezhishen/onebot-sdk/pkg/model"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_onebot_plus_pkg_cli_message_cli_proto protoreflect.FileDescriptor

var file_onebot_plus_pkg_cli_message_cli_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x74, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x6c, 0x69, 0x1a, 0x22, 0x6f, 0x6e,
	0x65, 0x62, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xa4, 0x03,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63,
	0x6c, 0x69, 0x12, 0x3d, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x47, 0x52, 0x50, 0x43, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x73, 0x67, 0x47, 0x52, 0x50, 0x43, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x4d, 0x73, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x52, 0x50, 0x43, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x47, 0x52, 0x50, 0x43, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e, 0x2f, 0x63, 0x6c, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_onebot_plus_pkg_cli_message_cli_proto_goTypes = []interface{}{
	(*model.MsgForSendGRPC)(nil),         // 0: model.MsgForSendGRPC
	(*model.PrivateMsgGRPC)(nil),         // 1: model.PrivateMsgGRPC
	(*model.GroupMsgGRPC)(nil),           // 2: model.GroupMsgGRPC
	(*wrapperspb.Int64Value)(nil),        // 3: google.protobuf.Int64Value
	(*emptypb.Empty)(nil),                // 4: google.protobuf.Empty
	(*model.MessageDataGRPC)(nil),        // 5: model.MessageDataGRPC
	(*model.ForwardMessageDataGRPC)(nil), // 6: model.ForwardMessageDataGRPC
}
var file_onebot_plus_pkg_cli_message_cli_proto_depIdxs = []int32{
	0, // 0: cli.message_grpc_cli.SendMsg:input_type -> model.MsgForSendGRPC
	1, // 1: cli.message_grpc_cli.SendPrivateMsg:input_type -> model.PrivateMsgGRPC
	2, // 2: cli.message_grpc_cli.SendGroupMsg:input_type -> model.GroupMsgGRPC
	3, // 3: cli.message_grpc_cli.DelMsg:input_type -> google.protobuf.Int64Value
	3, // 4: cli.message_grpc_cli.GetMsg:input_type -> google.protobuf.Int64Value
	3, // 5: cli.message_grpc_cli.GetForwardMsg:input_type -> google.protobuf.Int64Value
	3, // 6: cli.message_grpc_cli.SendMsg:output_type -> google.protobuf.Int64Value
	3, // 7: cli.message_grpc_cli.SendPrivateMsg:output_type -> google.protobuf.Int64Value
	3, // 8: cli.message_grpc_cli.SendGroupMsg:output_type -> google.protobuf.Int64Value
	4, // 9: cli.message_grpc_cli.DelMsg:output_type -> google.protobuf.Empty
	5, // 10: cli.message_grpc_cli.GetMsg:output_type -> model.MessageDataGRPC
	6, // 11: cli.message_grpc_cli.GetForwardMsg:output_type -> model.ForwardMessageDataGRPC
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_onebot_plus_pkg_cli_message_cli_proto_init() }
func file_onebot_plus_pkg_cli_message_cli_proto_init() {
	if File_onebot_plus_pkg_cli_message_cli_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onebot_plus_pkg_cli_message_cli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_onebot_plus_pkg_cli_message_cli_proto_goTypes,
		DependencyIndexes: file_onebot_plus_pkg_cli_message_cli_proto_depIdxs,
	}.Build()
	File_onebot_plus_pkg_cli_message_cli_proto = out.File
	file_onebot_plus_pkg_cli_message_cli_proto_rawDesc = nil
	file_onebot_plus_pkg_cli_message_cli_proto_goTypes = nil
	file_onebot_plus_pkg_cli_message_cli_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageGrpcCliClient is the client API for MessageGrpcCli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageGrpcCliClient interface {
	//发送消息
	SendMsg(ctx context.Context, in *model.MsgForSendGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
	//发送私聊消息
	SendPrivateMsg(ctx context.Context, in *model.PrivateMsgGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
	// 发送群消息
	SendGroupMsg(ctx context.Context, in *model.GroupMsgGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
	//删除消息
	DelMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//获取消息
	GetMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.MessageDataGRPC, error)
	//获取转发的消息
	GetForwardMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.ForwardMessageDataGRPC, error)
}

type messageGrpcCliClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageGrpcCliClient(cc grpc.ClientConnInterface) MessageGrpcCliClient {
	return &messageGrpcCliClient{cc}
}

func (c *messageGrpcCliClient) SendMsg(ctx context.Context, in *model.MsgForSendGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcCliClient) SendPrivateMsg(ctx context.Context, in *model.PrivateMsgGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/SendPrivateMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcCliClient) SendGroupMsg(ctx context.Context, in *model.GroupMsgGRPC, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/SendGroupMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcCliClient) DelMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/DelMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcCliClient) GetMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.MessageDataGRPC, error) {
	out := new(model.MessageDataGRPC)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/GetMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageGrpcCliClient) GetForwardMsg(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*model.ForwardMessageDataGRPC, error) {
	out := new(model.ForwardMessageDataGRPC)
	err := c.cc.Invoke(ctx, "/cli.message_grpc_cli/GetForwardMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageGrpcCliServer is the server API for MessageGrpcCli service.
type MessageGrpcCliServer interface {
	//发送消息
	SendMsg(context.Context, *model.MsgForSendGRPC) (*wrapperspb.Int64Value, error)
	//发送私聊消息
	SendPrivateMsg(context.Context, *model.PrivateMsgGRPC) (*wrapperspb.Int64Value, error)
	// 发送群消息
	SendGroupMsg(context.Context, *model.GroupMsgGRPC) (*wrapperspb.Int64Value, error)
	//删除消息
	DelMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	//获取消息
	GetMsg(context.Context, *wrapperspb.Int64Value) (*model.MessageDataGRPC, error)
	//获取转发的消息
	GetForwardMsg(context.Context, *wrapperspb.Int64Value) (*model.ForwardMessageDataGRPC, error)
}

// UnimplementedMessageGrpcCliServer can be embedded to have forward compatible implementations.
type UnimplementedMessageGrpcCliServer struct {
}

func (*UnimplementedMessageGrpcCliServer) SendMsg(context.Context, *model.MsgForSendGRPC) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (*UnimplementedMessageGrpcCliServer) SendPrivateMsg(context.Context, *model.PrivateMsgGRPC) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrivateMsg not implemented")
}
func (*UnimplementedMessageGrpcCliServer) SendGroupMsg(context.Context, *model.GroupMsgGRPC) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMsg not implemented")
}
func (*UnimplementedMessageGrpcCliServer) DelMsg(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMsg not implemented")
}
func (*UnimplementedMessageGrpcCliServer) GetMsg(context.Context, *wrapperspb.Int64Value) (*model.MessageDataGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (*UnimplementedMessageGrpcCliServer) GetForwardMsg(context.Context, *wrapperspb.Int64Value) (*model.ForwardMessageDataGRPC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardMsg not implemented")
}

func RegisterMessageGrpcCliServer(s *grpc.Server, srv MessageGrpcCliServer) {
	s.RegisterService(&_MessageGrpcCli_serviceDesc, srv)
}

func _MessageGrpcCli_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.MsgForSendGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).SendMsg(ctx, req.(*model.MsgForSendGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcCli_SendPrivateMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PrivateMsgGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).SendPrivateMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/SendPrivateMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).SendPrivateMsg(ctx, req.(*model.PrivateMsgGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcCli_SendGroupMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GroupMsgGRPC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).SendGroupMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/SendGroupMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).SendGroupMsg(ctx, req.(*model.GroupMsgGRPC))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcCli_DelMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).DelMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/DelMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).DelMsg(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcCli_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).GetMsg(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageGrpcCli_GetForwardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageGrpcCliServer).GetForwardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cli.message_grpc_cli/GetForwardMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageGrpcCliServer).GetForwardMsg(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageGrpcCli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cli.message_grpc_cli",
	HandlerType: (*MessageGrpcCliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _MessageGrpcCli_SendMsg_Handler,
		},
		{
			MethodName: "SendPrivateMsg",
			Handler:    _MessageGrpcCli_SendPrivateMsg_Handler,
		},
		{
			MethodName: "SendGroupMsg",
			Handler:    _MessageGrpcCli_SendGroupMsg_Handler,
		},
		{
			MethodName: "DelMsg",
			Handler:    _MessageGrpcCli_DelMsg_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _MessageGrpcCli_GetMsg_Handler,
		},
		{
			MethodName: "GetForwardMsg",
			Handler:    _MessageGrpcCli_GetForwardMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onebot-plus/pkg/cli/message_cli.proto",
}
